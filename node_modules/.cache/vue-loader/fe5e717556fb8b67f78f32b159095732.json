{"remainingRequest":"/home/runner/work/U1_Taller_Disenio_Materiales_Apoyo_EduInfantil/U1_Taller_Disenio_Materiales_Apoyo_EduInfantil/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U1_Taller_Disenio_Materiales_Apoyo_EduInfantil/U1_Taller_Disenio_Materiales_Apoyo_EduInfantil/src/views/curso/Tema2.vue?vue&type=template&id=3ed64fcb&lang=pug&","dependencies":[{"path":"/home/runner/work/U1_Taller_Disenio_Materiales_Apoyo_EduInfantil/U1_Taller_Disenio_Materiales_Apoyo_EduInfantil/src/views/curso/Tema2.vue","mtime":1747274799134},{"path":"/home/runner/work/U1_Taller_Disenio_Materiales_Apoyo_EduInfantil/U1_Taller_Disenio_Materiales_Apoyo_EduInfantil/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Taller_Disenio_Materiales_Apoyo_EduInfantil/U1_Taller_Disenio_Materiales_Apoyo_EduInfantil/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U1_Taller_Disenio_Materiales_Apoyo_EduInfantil/U1_Taller_Disenio_Materiales_Apoyo_EduInfantil/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U1_Taller_Disenio_Materiales_Apoyo_EduInfantil/U1_Taller_Disenio_Materiales_Apoyo_EduInfantil/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Taller_Disenio_Materiales_Apoyo_EduInfantil/U1_Taller_Disenio_Materiales_Apoyo_EduInfantil/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubyg6c3ViVGl0dWxvPSInMi4gT3JkZW4geSBqZXJhcnF1w61hJyIpCiAgLmNvbnRhaW5lci50YXJqZXRhLnRhcmpldGEtLWJsYW5jYS5wLTQucC1tZC01Lm92ZXJmbG93LWhpZGRlbgoKICAgIC5yb3cubWItNQogICAgICAuY29sLWxnLTQubWItMy5tYi1sZy0wLm9yZGVyLWxnLTIKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzEucG5nIiwgZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAuY29sLWxnLTgub3JkZXItbGctMQogICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIExvcyBjb25jZXB0b3MgZGUgPGI+b3JkZW4geSBqZXJhcnF1w61hPC9iPiBlbiBlbCBhcHJlbmRpemFqZSwgc29uIGZ1bmRhbWVudGFsZXMgcGFyYSBvcmdhbml6YXIgeSBlc3RydWN0dXJhciBsb3MgY29ub2NpbWllbnRvcyBkZSBtYW5lcmEgcXVlIGZhY2lsaXRlbiBlbCBkZXNhcnJvbGxvIGNvZ25pdGl2by4gRXN0ZSBlbmZvcXVlIHBlcm1pdGUgYSBsb3MgZXN0dWRpYW50ZXMgcHJvZ3Jlc2FyIGRlc2RlIGNvbmNlcHRvcyBzaW1wbGVzLCBoYWNpYSBpZGVhcyBtw6FzIGNvbXBsZWphcywgY3JlYW5kbyBjb25leGlvbmVzIHNpZ25pZmljYXRpdmFzIGVudHJlIGxvIHF1ZSB5YSBzYWJlbiB5IGxvIHF1ZSBlc3TDoW4gYXByZW5kaWVuZG8uIExhIHNlY3VlbmNpYWNpw7NuIGFkZWN1YWRhIGRlIGxvcyBjb250ZW5pZG9zIHkgZWwgdXNvIGRlIG9yZ2FuaXphZG9yZXMgcHJldmlvcywganVlZ2FuIHVuIHBhcGVsIGNydWNpYWwgZW4gZXN0ZSBwcm9jZXNvLiBQZXJvOgogICAgCiAgICAgICAgLmJnLWNvbG9yLTMucC00Lm1iLTMoZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLXN0YXJ0CiAgICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzIuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpLm14LWF1dG8KICAgICAgICAgICAgLmNvbC1sZwogICAgICAgICAgICAgIHAubWItMCDCv0PDs21vIGFmZWN0YSByZWFsbWVudGUgbGEgZXN0cnVjdHVyYSBqZXLDoXJxdWljYSBhbCBhcHJlbmRpemFqZSBkZSBsb3MgZXN0dWRpYW50ZXM/IMK/RGUgcXXDqSBtYW5lcmEgbGEgb3JnYW5pemFjacOzbiB5IGVsIG9yZGVuIGluZmx1eWVuIGVuIG51ZXN0cmEgY2FwYWNpZGFkIHBhcmEgY29tcHJlbmRlciB5IHJldGVuZXIgbGEgaW5mb3JtYWNpw7NuPyDCv1B1ZWRlbiBwZW5zYXIgZW4gdW4gbW9tZW50byBlbiBlbCBxdWUgbGEgZmFsdGEgZGUgZXN0cnVjdHVyYSBsZXMgaGF5YSBkaWZpY3VsdGFkbyBlbCBhcHJlbmRpemFqZT8gwr9Dw7NtbyBsbyBzdXBlcmFyb24/CiAgICAgICAgcCBFbiBlbCB0cmFuc2N1cnNvIGRlbCB0ZW1hLCBlc3RhcmVtb3MgZXN0dWRpYW5kbyBlc3RvcyBkb3MgY29uY2VwdG9zIGFwbGljYWRvcyBhbCBhcHJlbmRpemFqZSB5IGEgbGFzIHNlY3VlbmNpYXMgZGlkw6FjdGljYXMgeSBtYXRlcmlhbGVzOyB2ZXJlbW9zIGFsZ3Vub3MgYXV0b3JlcyBjb24gdGVvcsOtYXMgcXVlIGxvIHN1c3RlbnRhbiB5IHF1ZSBhw7puIGVuIGxhIGFjdHVhbGlkYWQsIHNpZ3VlbiBlc3RhbmRvIHZpZ2VudGVzLgogICAgICAgIGg1IEVtcGVjZW1vcyBkZWZpbmllbmRvIGVzdG9zIGNvbmNlcHRvczogCgogICAgLnJvdy5hbGlnbi1pdGVtcy1zdGFydC5tYi01CiAgICAgIC5jb2wtbGctNC5tYi0zLm1iLWxnLTAKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzMucG5nIiwgYWx0PSIiKS5tYi00Lm1iLWxnLTAKICAgICAgLmNvbC1sZy04CiAgICAKICAgICAgICBBY29yZGlvbkEodGlwbz0iYiIpCiAgICAgICAgICAuZGl2KHRpdHVsbz0iTGEgamVyYXJxdcOtYSIpCiAgICAgICAgICAgIHAgRXMgdW5hIGZvcm1hIGRlIG9yZ2FuaXphY2nDs24gZW4gbGEgcXVlIGxvcyBlbGVtZW50b3Mgc2Ugb3JkZW5hbiwgc2Vnw7puIHVuIG5pdmVsIGRlIGltcG9ydGFuY2lhIG8gYXV0b3JpZGFkLiBFc3RlIGNvbmNlcHRvIHNlIGFwbGljYSBlbiBkaXZlcnNhcyDDoXJlYXMsIGNvbW8gbGEgc29jaWVkYWQsIGxhcyBlbXByZXNhcyB5IGxhIGNsYXNpZmljYWNpw7NuIGRlIG9iamV0b3MuIExhIGplcmFycXXDrWEgaW1wbGljYSB1bmEgc3Vib3JkaW5hY2nDs24gZGUgbG9zIGVsZW1lbnRvcyBpbmZlcmlvcmVzIGEgbG9zIHN1cGVyaW9yZXMgKFJhZmZpbm8sIDIwMjQpLiBMYSBub2Npw7NuIGRlIGplcmFycXXDrWEgaGEgZXN0YWRvIHByZXNlbnRlIGVuIGxhcyBvcmdhbml6YWNpb25lcyBodW1hbmFzIGRlc2RlIHRpZW1wb3MgYW50aWd1b3MuIEVuIGxhIGFudGlndWEgR3JlY2lhLCBwb3IgZWplbXBsbywgbGEgamVyYXJxdcOtYSBzZSBlbnRlbmTDrWEgY29tbyBlbCBtYW5kYXRvIGRpdmlubywgZWplcmNpZG8gcG9yIGxvcyBjbMOpcmlnb3MgZW5jYXJnYWRvcyBkZSBsb3Mgcml0b3Mgc2FncmFkb3MuIENvbiBlbCB0aWVtcG8sIGxhIGplcmFycXXDrWEgc2UgaGEgYXBsaWNhZG8gZW4gbGEgY29uc3RydWNjacOzbiBkZSBzb2NpZWRhZGVzLCBvcmdhbml6YWNpb25lcyBlbXByZXNhcmlhbGVzIHkgY2xhc2lmaWNhY2lvbmVzIGNpZW50w61maWNhcy4KICAgIAogICAgICAgICAgLmRpdih0aXR1bG89IkVsIG9yZGVuIikKICAgICAgICAgICAgcCBTZSByZWZpZXJlIGEgbGEgZGlzcG9zaWNpw7NuIHkgb3JnYW5pemFjacOzbiBkZSBlbGVtZW50b3MgZW4gdW4gcGF0csOzbiBvIHNlY3VlbmNpYSBsw7NnaWNhLiBFcyB1bmEgZXN0cnVjdHVyYSBxdWUgZmFjaWxpdGEgbGEgY29tcHJlbnNpw7NuLCBlbCBhY2Nlc28geSBlbCB1c28gZGUgaW5mb3JtYWNpw7NuIG8gcmVjdXJzb3MgKFDDqXJleiwgKDIwMTQpLiBFbCBvcmRlbiBlcyBmdW5kYW1lbnRhbCBlbiBkaXZlcnNvcyBjYW1wb3MsIGNvbW8gbGEgY2llbmNpYSwgbGEgZWR1Y2FjacOzbiwgbGEgc29jaWVkYWQgeSBsYSB0ZWNub2xvZ8OtYSwgZGFkbyBxdWUgcGVybWl0ZSB1bmEgbWVqb3Igb3JnYW5pemFjacOzbiB5IGVmaWNpZW5jaWEuIEZpbMOzc29mb3MgZ3JpZWdvcywgY29tbyBBcmlzdMOzdGVsZXMsIGV4cGxvcmFyb24gbGEgaWRlYSBkZWwgb3JkZW4gZW4gZWwgY29zbW9zIHkgbGEgbmF0dXJhbGV6YS4gQXJpc3TDs3RlbGVzIHByb3B1c28gcXVlIGVsIHVuaXZlcnNvIHRlbsOtYSB1biBvcmRlbiBuYXR1cmFsIHkgamVyw6FycXVpY28sIGRvbmRlIGNhZGEgZWxlbWVudG8gdGVuw61hIHVuIHByb3DDs3NpdG8geSBsdWdhciBlc3BlY8OtZmljbyAoTW9saW5hLCAyMDE4KS4gVGFtYmnDqW4gbG9zIHJvbWFub3MgYWRvcHRhcm9uIGVsIGNvbmNlcHRvIGRlIG9yZGVuIGVuIHN1cyBsZXllcywgYXJxdWl0ZWN0dXJhIHkgb3JnYW5pemFjacOzbiBzb2NpYWwsIGRlc3RhY2FuZG8gbGEgaW1wb3J0YW5jaWEgZGUgbGEgZGlzY2lwbGluYSB5IGxhIGVzdHJ1Y3R1cmEuCgogICAgI3RfMl8xLnRpdHVsby1zZWd1bmRvKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgaDIgI1tzcGFuIDIuMV0gQ29uY2VwdG8gZGUgb3JkZW4geSBqZXJhcnF1w61hIGVuIGVsIGFwcmVuZGl6YWplCiAgICAKICAgIHAubWItNCBBaG9yYSBiaWVuLCBlbCBvcmRlbiB5IGxhIGplcmFycXXDrWEgZW4gZWwgYXByZW5kaXphamUsIHNlIHJlZmllcmVuIGEgbGEgb3JnYW5pemFjacOzbiBzaXN0ZW3DoXRpY2EgZGUgY29udGVuaWRvcyB5IGV4cGVyaWVuY2lhcyBlZHVjYXRpdmFzIHF1ZSBwZXJtaXRlbiBhbCBlc3R1ZGlhbnRlIGRlc2Fycm9sbGFyIG9wZXJhY2lvbmVzIG1lbnRhbGVzIGRlIG1hbmVyYSBwcm9ncmVzaXZhLiBTZWfDum4gUGlhZ2V0IGNpdGFkbyBwb3IgUmVnYWRlciAoMjAxNSksIGVzdGFzIGVzdHJ1Y3R1cmFzIGNvZ25pdGl2YXMgc2UgY29uc3RydXllbiBkZSBtYW5lcmEgc2VjdWVuY2lhbCwgcGFydGllbmRvIGRlIGxvIHNpbXBsZSBhIGxvIGNvbXBsZWpvLiBFc3RlIGVuZm9xdWUgc2lzdGVtw6F0aWNvIHBlcm1pdGUgcXVlIGxvcyBlc3R1ZGlhbnRlcyBjb25zdHJ1eWFuIHkgZXhwYW5kYW4gc3VzIGNvbm9jaW1pZW50b3MgZGUgbWFuZXJhIGzDs2dpY2EgeSBlZmVjdGl2YS4KICAKICAgIFRhYnNDLmNvbG9yLWFjZW50by1jb250ZW5pZG8ubWItNQogICAgICAudGFicy1jb250ZW50LmJvcmRlci5weC00LnAtbWQtNS5weS0zKHRpdHVsbz0iT3JkZW4gZW4gZWwgYXByZW5kaXphamUiIDppY29uPSJyZXF1aXJlKCdAL2Fzc2V0cy9idWxsZXRzLzEuc3ZnJykiKQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctNy5jb2wteGwtOC5tYi0zLm1iLW1kLTAKICAgICAgICAgICAgaDQgT3JkZW4gZW4gZWwgYXByZW5kaXphamUKICAgICAgICAgICAgcCBTZSByZWZpZXJlIGEgbGEgc2VjdWVuY2lhY2nDs24gb3JnYW5pemFkYSB5IGzDs2dpY2EgZGUgbG9zIGNvbnRlbmlkb3MgZWR1Y2F0aXZvcy4gRXN0byBpbXBsaWNhIHByZXNlbnRhciBsb3MgdGVtYXMgZGUgdW5hIG1hbmVyYSBxdWUgbG9zIGVzdHVkaWFudGVzIHB1ZWRhbiBzZWd1aXIgZGUgZm9ybWEgY29oZXJlbnRlIHkgc2lnbmlmaWNhdGl2YS4gTGEgcHJlc2VudGFjacOzbiBvcmRlbmFkYSBkZSBsb3MgY29udGVuaWRvcyBmYWNpbGl0YSBsYSBjb21wcmVuc2nDs24geSByZXRlbmNpw7NuIGRlIGxhIGluZm9ybWFjacOzbiwgcGVybWl0aWVuZG8gYSBsb3MgZXN0dWRpYW50ZXMgY29uZWN0YXIgbnVldm9zIGNvbm9jaW1pZW50b3MsIGNvbiBsbyBxdWUgeWEgc2FiZW4uCiAgICAKICAgICAgICAgIC5jb2wtbWQtOC5jb2wtbGctNS5jb2wteGwtNAogICAgICAgICAgICBmaWd1cmUoZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWEyLzQucG5nJywgYWx0PScnKQogICAgCiAgICAgIC50YWJzLWNvbnRlbnQuYm9yZGVyLnB4LTQucC1tZC01LnB5LTModGl0dWxvPSJKZXJhcnF1w61hIGVuIGVsIGFwcmVuZGl6YWplIiA6aWNvbj0icmVxdWlyZSgnQC9hc3NldHMvYnVsbGV0cy8xLnN2ZycpIikKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAuY29sLWxnLTcuY29sLXhsLTgubWItMy5tYi1tZC0wCiAgICAgICAgICAgIGg0IEplcmFycXXDrWEgZW4gZWwgYXByZW5kaXphamUKICAgICAgICAgICAgcCBJbXBsaWNhIGxhIG9yZ2FuaXphY2nDs24gZGUgbG9zIGNvbnRlbmlkb3MgZWR1Y2F0aXZvcyBlbiBuaXZlbGVzIGRlIGNvbXBsZWppZGFkIGNyZWNpZW50ZS4gTG9zIGVzdHVkaWFudGVzIGNvbWllbnphbiBjb24gY29uY2VwdG9zIGLDoXNpY29zIHkgc2ltcGxlcywgeSBhIG1lZGlkYSBxdWUgYXZhbnphbiwgc2UgbGVzIHByZXNlbnRhbiBjb25jZXB0b3MgbcOhcyBjb21wbGVqb3MgeSBhYnN0cmFjdG9zLiBFc3RhIHByb2dyZXNpw7NuIGplcsOhcnF1aWNhIGVzIGVzZW5jaWFsIHBhcmEgZWwgZGVzYXJyb2xsbyBkZSBoYWJpbGlkYWRlcyBjb2duaXRpdmFzIGF2YW56YWRhcyB5IGxhIGNvbnN0cnVjY2nDs24gZGUgY29ub2NpbWllbnRvcyBwcm9mdW5kb3MuCgogICAgICAgICAgLmNvbC1tZC04LmNvbC1sZy01LmNvbC14bC00CiAgICAgICAgICAgIGZpZ3VyZShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTIvNS5wbmcnLCBhbHQ9JycpCiAgICAKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWNvbG9yLTUKICAgICAgLnAtNC5wLW1kLTUKICAgICAgICBwLm1iLTQgUGFyYSBKZWFuIFBpYWdldCwgY2l0YWRvIHBvciBSZWdhZGVyICgyMDE1KSwgdW4gZGVzdGFjYWRvIHBzaWPDs2xvZ28gZGVsIGRlc2Fycm9sbG8sIHByb3B1c28gcXVlIGVsIGFwcmVuZGl6YWplIHNlIHJlYWxpemEgZGUgbWFuZXJhIHNlY3VlbmNpYWwgeSBwcm9ncmVzaXZhLCBsYXMgZXN0cnVjdHVyYXMgY29nbml0aXZhcyBzZSBjb25zdHJ1eWVuIHBhcnRpZW5kbyBkZSBsbyBzaW1wbGUgYSBsbyBjb21wbGVqbywgc2lndWllbmRvIGV0YXBhcyBlc3BlY8OtZmljYXMgZGUgZGVzYXJyb2xsbyBjb2duaXRpdm86CgogICAgICAgIGRpdi5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1zdHJldGNoLm1iLTUKICAgICAgICAgIGRpdi5jb2wtbGctMy5tYi00KGRhdGEtYW9zPSJ6b29tLWluLXVwIikKICAgICAgICAgICAgZGl2LmJnLWNvbG9yLXdoaXRlLmJveC1zaGFkb3cucHgtNC5weS01LmgtMTAwCiAgICAgICAgICAgICAgaW1nLm14LWF1dG8uZC1ibG9jay5tYi00KHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvNi5zdmciIGFsdD0iIiBzdHlsZT0id2lkdGg6IDkwcHgiKQogICAgICAgICAgICAgIGg1LnRleHQtY2VudGVyIEV0YXBhIHNlbnNvcmlvbW90b3JhICgwLTIgYcOxb3MpCiAgICAgICAgICAgICAgcC5tYi0wLnRleHQtY2VudGVyIExvcyBuacOxb3MgYXByZW5kZW4gYSB0cmF2w6lzIGRlIGxhIG1hbmlwdWxhY2nDs24gZGUgb2JqZXRvcyB5IGxhIGV4cGVyaWVuY2lhIHNlbnNvcmlhbC4KICAgICAgICAKICAgICAgICAgIGRpdi5jb2wtbGctMy5tYi00KGRhdGEtYW9zPSJ6b29tLWluLXVwIikKICAgICAgICAgICAgZGl2LmJnLWNvbG9yLXdoaXRlLmJveC1zaGFkb3cucHgtNC5weS01LmgtMTAwCiAgICAgICAgICAgICAgaW1nLm14LWF1dG8uZC1ibG9jay5tYi00KHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvNy5zdmciIGFsdD0iIiBzdHlsZT0id2lkdGg6IDkwcHgiKQogICAgICAgICAgICAgIGg1LnRleHQtY2VudGVyIEV0YXBhIHByZW9wZXJhY2lvbmFsICgyLTcgYcOxb3MpCiAgICAgICAgICAgICAgcC5tYi0wLnRleHQtY2VudGVyIExvcyBuacOxb3MgY29taWVuemFuIGEgdXNhciBlbCBsZW5ndWFqZSB5IGEgZGVzYXJyb2xsYXIgcmVwcmVzZW50YWNpb25lcyBzaW1iw7NsaWNhcy4KICAgICAgICAKICAgICAgICAgIGRpdi5jb2wtbGctMy5tYi00KGRhdGEtYW9zPSJ6b29tLWluLXVwIikKICAgICAgICAgICAgZGl2LmJnLWNvbG9yLXdoaXRlLmJveC1zaGFkb3cucHgtNC5weS01LmgtMTAwCiAgICAgICAgICAgICAgaW1nLm14LWF1dG8uZC1ibG9jay5tYi00KHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTIvOC5zdmciIGFsdD0iIiBzdHlsZT0id2lkdGg6IDkwcHgiKQogICAgICAgICAgICAgIGg1LnRleHQtY2VudGVyIEV0YXBhIGRlIGxhcyBvcGVyYWNpb25lcyBjb25jcmV0YXMgKDctMTEgYcOxb3MpCiAgICAgICAgICAgICAgcC5tYi0wLnRleHQtY2VudGVyIExvcyBuacOxb3MgZGVzYXJyb2xsYW4gaGFiaWxpZGFkZXMgZGUgY2xhc2lmaWNhY2nDs24sIG9yZGVuYW1pZW50byB5IGNvbnNlcnZhY2nDs24uCiAgICAgICAgICBkaXYuY29sLWxnLTMubWItNChkYXRhLWFvcz0iem9vbS1pbi11cCIpCiAgICAgICAgICAgIGRpdi5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnB4LTQucHktNS5oLTEwMAogICAgICAgICAgICAgIGltZy5teC1hdXRvLmQtYmxvY2subWItNChzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzkuc3ZnIiBhbHQ9IiIgc3R5bGU9IndpZHRoOiA5MHB4IikKICAgICAgICAgICAgICBoNS50ZXh0LWNlbnRlciBFdGFwYSBkZSBsYXMgb3BlcmFjaW9uZXMgZm9ybWFsZXMgKDExIGHDsW9zIGVuIGFkZWxhbnRlKQogICAgICAgICAgICAgIHAubWItMC50ZXh0LWNlbnRlciBMb3MgYWRvbGVzY2VudGVzIHkgYWR1bHRvcyBqw7N2ZW5lcywgZGVzYXJyb2xsYW4gbGEgY2FwYWNpZGFkIGRlIHBlbnNhbWllbnRvIGFic3RyYWN0byB5IHJhem9uYW1pZW50byBsw7NnaWNvLgogICAgCiAgICBwLm1iLTQgRXN0YXMgZXRhcGFzIHJlZmxlamFuIGPDs21vIGxvcyBuacOxb3MgY29uc3RydXllbiB5IG9yZ2FuaXphbiBzdSBjb25vY2ltaWVudG8sIGRlIG1hbmVyYSBqZXLDoXJxdWljYSB5IG9yZGVuYWRhLgoKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWNvbG9yLTQubWItNQogICAgICAucHgtNC5wLW1kLTUKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAuY29sLWxnLTcub3JkZXItMgogICAgICAgICAgICBoMi5tYi00KGRhdGEtYW9zPSJmbGlwLXVwIikgT3Ryb3MgYXV0b3JlcwogICAgICAgICAgICBwLm1iLTQoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKSBFbCBlc3R1ZGlvIGRlIGxhcyB0ZW9yw61hcyBkZWwgYXByZW5kaXphamUgaGEgc2lkbyBlbnJpcXVlY2lkbyBwb3IgZGl2ZXJzb3MgYXV0b3JlcyBxdWUgaGFuIGFwb3J0YWRvIGVuZm9xdWVzIGlubm92YWRvcmVzIHNvYnJlIGxhIGNvbnN0cnVjY2nDs24gZGVsIGNvbm9jaW1pZW50by4gRW4gZWwgUERGIDxiPk90cm9zIGF1dG9yZXM8L2I+LCBzZSBhbmFsaXphbiBsYXMgY29udHJpYnVjaW9uZXMgZGUgSmVyb21lIEJydW5lciB5IERhdmlkIEF1c3ViZWwsIHF1aWVuZXMgZGVzYXJyb2xsYXJvbiB0ZW9yw61hcyBmdW5kYW1lbnRhbGVzIGNvbW8gZWwgYW5kYW1pYWplIHkgZWwgYXByZW5kaXphamUgc2lnbmlmaWNhdGl2by4gQSB0cmF2w6lzIGRlIGVzdGUgYW7DoWxpc2lzLCBzZSBjb21wcmVuZGVyw6EgY8OzbW8gc3VzIHBsYW50ZWFtaWVudG9zIGhhbiBpbmZsdWlkbyBlbiBsYSBlZHVjYWNpw7NuIG1vZGVybmEgeSBlbiBsYSBtYW5lcmEgZW4gcXVlIGxvcyBkb2NlbnRlcyBkaXNlw7FhbiBlc3RyYXRlZ2lhcyBwYXJhIGZhY2lsaXRhciBlbCBhcHJlbmRpemFqZSBlbiBkaXN0aW50b3MgY29udGV4dG9zLgogICAgCiAgICAgICAgICAgIGEuYW5leG8ubWItNC5iZy13aGl0ZS53LWZpdCg6aHJlZj0ib2J0ZW5lckxpbmsoJy9kb3dubG9hZHMvQW5leG9fMy5wZGYnKSIgdGFyZ2V0PSJfYmxhbmsiKShkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgICAgICAgICAgLmFuZXhvX19pY29ubyg6c3R5bGU9InsnYmFja2dyb3VuZC1jb2xvcic6ICcjRkNERkRCJ30iKQogICAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvdGVtcGxhdGUvaWNvbm8tcGRmLnN2ZyIpCiAgICAgICAgICAgICAgLmFuZXhvX190ZXh0bwogICAgICAgICAgICAgICAgcCA8c3Ryb25nPkFuZXhvLiA8L3N0cm9uZz4gT3Ryb3MgYXV0b3Jlcy4KICAgIAogICAgICAgICAgLmNvbC1sZy01Lm9yZGVyLTEubWItMy5tYi1sZy0wCiAgICAgICAgICAgIGZpZ3VyZShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTIvMTAucG5nJywgYWx0PScnKQogICAgCiAgICAjdF8yXzIudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICBoMiAjW3NwYW4gMi4yXSBUaXBvcyBkZSBvcmdhbml6YWRvcmVzIHByZXZpb3M6IG1hcGEgY29uY2VwdHVhbAogICAgCiAgICBwLm1iLTQgUGFyYSBNb3JlaXJhICgyMDEyKSwgc2Vnw7puIGxvcyBhcG9ydGVzIGRlIEF1c3ViZWwsIGV4aXN0ZW4gZGlmZXJlbnRlcyB0aXBvcyBkZSBvcmdhbml6YWRvcmVzIHByZXZpb3M6IAoKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWNvbG9yLWluZm8ubWItNQogICAgICAucC00LnAtbWQtNQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctOAogICAgICAgICAgICBJbWFnZW5JbmZvZ3JhZmljYS5jb2xvci1zZWN1bmRhcmlvCiAgICAgICAgICAgICAgdGVtcGxhdGUodi1zbG90OmltYWdlbikKICAgICAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMi8xMS5zdmcnLCBhbHQ9JycsIHN0eWxlPSJtYXgtd2lkdGg6IDExMDZweDsiKS5teC1hdXRvCiAgICAKICAgICAgICAgICAgICAuYmctY29sb3Itd2hpdGUuYm94LXNoYWRvdy5wLTMoeD0iOCUiIHk9IjglIiBudW1lcm89IisiKQogICAgICAgICAgICAgICAgaDUgMS4gTWFwYXMgY29uY2VwdHVhbGVzCiAgICAgICAgICAgICAgICBwIFJlcHJlc2VudGFjaW9uZXMgZ3LDoWZpY2FzIHF1ZSBtdWVzdHJhbiBsYXMgcmVsYWNpb25lcyBlbnRyZSBjb25jZXB0b3MuIExvcyBtYXBhcyBjb25jZXB0dWFsZXMgcGVybWl0ZW4gYSBsb3MgZXN0dWRpYW50ZXMgdmlzdWFsaXphciBjw7NtbyBzZSBjb25lY3RhbiBsb3MgbnVldm9zIGNvbnRlbmlkb3MgY29uIGxvIHF1ZSB5YSBzYWJlbi4KICAgIAogICAgICAgICAgICAgIC5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnAtMyh4PSI4JSIgeT0iNTYlIiBudW1lcm89IisiKQogICAgICAgICAgICAgICAgaDUgMi4gRXNxdWVtYXMgbyBkaWFncmFtYXMKICAgICAgICAgICAgICAgIHAgRXN0cnVjdHVyYXMgdmlzdWFsZXMgcXVlIG9yZ2FuaXphbiBsYSBpbmZvcm1hY2nDs24gZGUgbWFuZXJhIGzDs2dpY2EuIFBvciBlamVtcGxvLCBkaWFncmFtYXMgZGUgZmx1am8gcXVlIGlsdXN0cmFuIHByb2Nlc29zIG8gc2VjdWVuY2lhcy4KICAgIAogICAgICAgICAgICAgIC5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnAtMyh4PSI5MSUiIHk9IjglIiBudW1lcm89IisiKQogICAgICAgICAgICAgICAgaDUgMy4gQW5hbG9nw61hcyB5IG1ldMOhZm9yYXMKICAgICAgICAgICAgICAgIHAgQ29tcGFyYWNpb25lcyBxdWUgcmVsYWNpb25hbiBudWV2b3MgY29uY2VwdG9zIGNvbiBpZGVhcyBmYW1pbGlhcmVzIHBhcmEgbG9zIGVzdHVkaWFudGVzLiBMYXMgYW5hbG9nw61hcyB5IGxhcyBtZXTDoWZvcmFzLCBmYWNpbGl0YW4gbGEgY29tcHJlbnNpw7NuIGRlIGNvbmNlcHRvcyBhYnN0cmFjdG9zLgogICAgCiAgICAgICAgICAgICAgLmJnLWNvbG9yLXdoaXRlLmJveC1zaGFkb3cucC0zKHg9IjkxJSIgeT0iNTYlIiBudW1lcm89IisiKQogICAgICAgICAgICAgICAgaDUgNC4gUHJlZ3VudGFzIGd1w61hCiAgICAgICAgICAgICAgICBwIFByZWd1bnRhcyBxdWUgb3JpZW50YW4gZWwgcGVuc2FtaWVudG8gZGUgbG9zIGVzdHVkaWFudGVzIGhhY2lhIGxvcyB0ZW1hcyBxdWUgc2UgdmFuIGEgdHJhdGFyLCBpbmNlbnRpdmFuZG8gbGEgcmVmbGV4acOzbiB5IGVsIGFuw6FsaXNpcyBwcmV2aW8uCiAgICAKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWNvbG9yLTUubWItNQogICAgICAucHgtNC5wLW1kLTUKICAgICAgICAucm93Lm1iLTUKICAgICAgICAgIC5jb2wtbGctNC5vcmRlci0yCiAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzEyLnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgIC5jb2wtbGctOC5vcmRlci0xLm1iLTMubWItbGctMAogICAgICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBPcmVsbGFuYSBWYWxkw6lzICgyMDA5KSwgcG9yIHN1IHBhcnRlLCBoYWNlIGVzcGVjaWFsIMOpbmZhc2lzIGVuIGxvcyBtYXBhcyBjb25jZXB0dWFsZXMsIHB1ZXN0byBxdWUgZGEgcmVzcHVlc3RhIGEgbGEgdGVvcsOtYSBkZSBBdXN1YmVsIGFxdcOtIGV4cHVlc3RhOyBlbnRvbmNlcywgbG9zIG1hcGFzIGNvbmNlcHR1YWxlcywgZGVzYXJyb2xsYWRvcyBlbiBsYSBVbml2ZXJzaWRhZCBkZSBDb3JuZWxsIGEgcGFydGlyIGRlIGxhIHRlb3LDrWEgZGVsIGFwcmVuZGl6YWplIHNpZ25pZmljYXRpdm8gZGUgQXVzdWJlbCwgc2UgaGFuIGNvbnZlcnRpZG8gZW4gdW5hIGhlcnJhbWllbnRhIHZhbGlvc2EgcGFyYSBwcm9mZXNvcmVzLCBpbnZlc3RpZ2Fkb3JlcyB5IGVzdHVkaWFudGVzLiBTdSBvYmpldGl2byBwcmluY2lwYWwgZXMgcmVwcmVzZW50YXIgcmVsYWNpb25lcyBzaWduaWZpY2F0aXZhcyBlbnRyZSBjb25jZXB0b3MsIGVuIGZvcm1hIGRlIHByb3Bvc2ljaW9uZXMsIGZhY2lsaXRhbmRvIGxhIGNvbXByZW5zacOzbiB5IGFzaW1pbGFjacOzbiBkZSBsYSBpbmZvcm1hY2nDs24uIFVuIG1hcGEgY29uY2VwdHVhbCBiw6FzaWNvIGNvbnN0YSBkZSBkb3MgbyBtw6FzIGNvbmNlcHRvcyB1bmlkb3MgcG9yIHBhbGFicmFzIGRlIGVubGFjZSwgZm9ybWFuZG8gdW5hIHByb3Bvc2ljacOzbiBjb24gc2lnbmlmaWNhZG8gZXNwZWPDrWZpY28uIFBvciBlamVtcGxvLCAiZWwgY2llbG8gZXMgYXp1bCIgcmVwcmVzZW50YSB1bmEgcHJvcG9zaWNpw7NuIHbDoWxpZGEgcXVlIHJlbGFjaW9uYSBsb3MgY29uY2VwdG9zICJjaWVsbyIgeSAiYXp1bCIuCiAgICAgICAgCiAgICAgICAgICAgIC5iZy1jb2xvci0yLnAtNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgICAgICBwLm1iLTAgTG9zIG1hcGFzIGNvbmNlcHR1YWxlcyBzZSBjYXJhY3Rlcml6YW4gcG9yIHN1IGVzdHJ1Y3R1cmEgamVyw6FycXVpY2EsIGRvbmRlIGxvcyBjb25jZXB0b3MgbcOhcyBnZW5lcmFsZXMgZSBpbmNsdXNpdm9zIHNlIHNpdMO6YW4gZW4gbGEgcGFydGUgc3VwZXJpb3IsIG1pZW50cmFzIHF1ZSBsb3MgY29uY2VwdG9zIG3DoXMgZXNwZWPDrWZpY29zIHNlIHViaWNhbiBlbiBsYSBwYXJ0ZSBpbmZlcmlvci4gRXN0YSBvcmdhbml6YWNpw7NuIGZhY2lsaXRhIGxhIGNvbXByZW5zacOzbiBkZSBjw7NtbyBzZSByZWxhY2lvbmFuIGxvcyBjb25jZXB0b3MgZW50cmUgc8OtIHkgY8OzbW8gc2UgY29uc3RydXllIGVsIGNvbm9jaW1pZW50bywgZGUgbWFuZXJhIHByb2dyZXNpdmEuIExvcyBtYXBhcyBjb25jZXB0dWFsZXMgbm8gc29sbyByZXByZXNlbnRhbiB1biBjb25qdW50byBkZSBzaWduaWZpY2Fkb3MgY29uY2VwdHVhbGVzLCBzaW5vIHF1ZSB0YW1iacOpbiByZWZsZWphbiBsYSBlc3RydWN0dXJhIGRlIHByb3Bvc2ljaW9uZXMgcXVlIHN1YnlhY2VuIGEgbGEgY29tcHJlbnNpw7NuIGRlIHVuIHRlbWEuCiAgICAgICAgCiAgICAgICAgaDIoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIEVsIHVzbyBkZSBtYXBhcyBjb25jZXB0dWFsZXMgY29tbyBlc3RyYXRlZ2lhIGRlIGFwcmVuZGl6YWplCiAgICAgICAgcC5tYi01IFNlZ8O6biBkaXZlcnNvcyBhdXRvcmVzIGNvbW8gQmVsdHLDoW4sIE9udG9yaWEgeSBOb3ZhaywgY2l0YWRvcyBwb3IgT3JlbGxhbmEgVmFsZMOpcyAoMjAwOSksIGxvcyBtYXBhcyBjb25jZXB0dWFsZXM6CgogICAgICAgIGRpdi5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1zdHJldGNoCiAgICAgICAgICBkaXYuY29sLWxnLTQubWItNChkYXRhLWFvcz0iem9vbS1pbi11cCIpCiAgICAgICAgICAgIGRpdi5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnB4LTQucHktNS5oLTEwMAogICAgICAgICAgICAgIGltZy5teC1hdXRvLmQtYmxvY2subWItNChzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzEzLnN2ZyIgYWx0PSIiIHN0eWxlPSJ3aWR0aDogOTBweCIpCiAgICAgICAgICAgICAgaDUudGV4dC1jZW50ZXIgUHJpbWVybwogICAgICAgICAgICAgIHAubWItMC50ZXh0LWNlbnRlciBTb24gdW5hIGhlcnJhbWllbnRhIGVmaWNheiBwYXJhIHByb21vdmVyIGVsIGFwcmVuZGl6YWplIHNpZ25pZmljYXRpdm8uCiAgICAgICAgCiAgICAgICAgICBkaXYuY29sLWxnLTQubWItNChkYXRhLWFvcz0iem9vbS1pbi11cCIpCiAgICAgICAgICAgIGRpdi5iZy1jb2xvci13aGl0ZS5ib3gtc2hhZG93LnB4LTQucHktNS5oLTEwMAogICAgICAgICAgICAgIGltZy5teC1hdXRvLmQtYmxvY2subWItNChzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzEzLnN2ZyIgYWx0PSIiIHN0eWxlPSJ3aWR0aDogOTBweCIpCiAgICAgICAgICAgICAgaDUudGV4dC1jZW50ZXIgU2VndW5kbwogICAgICAgICAgICAgIHAubWItMC50ZXh0LWNlbnRlciBGYWNpbGl0YW4gbGEgb3JnYW5pemFjacOzbiBkZSBsb3MgY29udGVuaWRvcywgbGEgY29uZXhpw7NuIGVudHJlIGNvbmNlcHRvcyB5IGxhIGFzaW1pbGFjacOzbiBkZSBudWV2YSBpbmZvcm1hY2nDs24uIAogICAgICAgIAogICAgICAgICAgZGl2LmNvbC1sZy00Lm1iLTQoZGF0YS1hb3M9Inpvb20taW4tdXAiKQogICAgICAgICAgICBkaXYuYmctY29sb3Itd2hpdGUuYm94LXNoYWRvdy5weC00LnB5LTUuaC0xMDAKICAgICAgICAgICAgICBpbWcubXgtYXV0by5kLWJsb2NrLm1iLTQoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8xMy5zdmciIGFsdD0iIiBzdHlsZT0id2lkdGg6IDkwcHgiKQogICAgICAgICAgICAgIGg1LnRleHQtY2VudGVyIFRlcmNlcm8KICAgICAgICAgICAgICBwLm1iLTAudGV4dC1jZW50ZXIgRm9tZW50YW4gZWwgZGVzYXJyb2xsbyBkZSBkZXN0cmV6YXMgY29nbml0aXZhcyB5IG1ldGFjb2duaXRpdmFzIGVuIGxvcyBlc3R1ZGlhbnRlcywgY29tbyBsYSBjYXBhY2lkYWQgZGUgYW5hbGl6YXIsIHNpbnRldGl6YXIgeSByZWxhY2lvbmFyIGluZm9ybWFjacOzbi4KICAgIAogICAgLnJvdy5tYi01CiAgICAgIC5jb2wtbGctNC5tYi0zLm1iLWxnLTAKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzE0LnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgLmNvbC1sZy04CiAgICAgICAgcCBTdSB1c28gc2UgY2VudHJhIGVuIGVsIGFsdW1ubywgcHJvbW92aWVuZG8gdW4gYXByZW5kaXphamUgYWN0aXZvIHkgYXV0w7Nub21vLgogICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIExhIGludmVzdGlnYWNpw7NuIHNvYnJlIGVsIGFwcmVuZGl6YWplLCBoYSByZXZlbGFkbyBxdWUgbG9zIGluZGl2aWR1b3MgY29tYmluYW4gY29uY2VwdG9zIHkgcHJvY2VkaW1pZW50b3MgZW4gZm9ybWEgZGUgcmVnbGFzIHBhcmEgbGEgYWNjacOzbiwgbG8gcXVlIHNlIGNvbm9jZSBjb21vIDxiPmNvbm9jaW1pZW50byBlc3RyYXTDqWdpY288L2I+LiBFc3RlIHRpcG8gZGUgY29ub2NpbWllbnRvIGltcGxpY2EgbGEgY2FwYWNpZGFkIGRlIGFjdGl2YXIgZXN0cmF0ZWdpYXMgY29nbml0aXZhcyBwYXJhIHJlc29sdmVyIHByb2JsZW1hcyB5IGFsY2FuemFyIG1ldGFzLiBMb3MgbWFwYXMgY29uY2VwdHVhbGVzLCBhbCByZXByZXNlbnRhciBsYXMgcmVsYWNpb25lcyBlbnRyZSBjb25jZXB0b3MgeSBwcm9wb3NpY2lvbmVzLCBwdWVkZW4gc2VyIHVuYSBoZXJyYW1pZW50YSDDunRpbCBwYXJhIGRlc2Fycm9sbGFyIGVsIGNvbm9jaW1pZW50byBlc3RyYXTDqWdpY28sIHB1ZXN0byBxdWUgcGVybWl0ZW4gYSBsb3MgZXN0dWRpYW50ZXMgdmlzdWFsaXphciB5IGNvbXByZW5kZXIgY8OzbW8gYXBsaWNhciBzdXMgY29ub2NpbWllbnRvcyBlbiBkaWZlcmVudGVzIHNpdHVhY2lvbmVzLgogICAgCiAgICAgICAgLmJnLWNvbG9yLTMucC00KGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgICAgLnJvdy5hbGlnbi1pdGVtcy1zdGFydAogICAgICAgICAgICAuY29sLWxnLWF1dG8KICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8xNS5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgICAgcC5tYi0wIEEgcGVzYXIgZGUgc3UgdXRpbGlkYWQgeSBwb3RlbmNpYWwsIGxvcyBtYXBhcyBjb25jZXB0dWFsZXMgbm8gc29uIGFtcGxpYW1lbnRlIHV0aWxpemFkb3MgZW4gZWwgw6FtYml0byBlZHVjYXRpdm8uIEVzdG8gcHVlZGUgZGViZXJzZSBhIGxhIGZhbHRhIGRlIGNvbm9jaW1pZW50byBzb2JyZSBzdSBhcGxpY2FjacOzbiB5IGJlbmVmaWNpb3MuIFNpbiBlbWJhcmdvLCBlc3RhIGVzdHJhdGVnaWEgZGUgYXByZW5kaXphamUgeSBldmFsdWFjacOzbiwgb2ZyZWNlIG51bWVyb3NhcyB2ZW50YWphcywgcG9ycXVlIHBlcm1pdGUgYSBsb3MgZXN0dWRpYW50ZXMgY29tcHJlbmRlciBsb3MgY29ub2NpbWllbnRvcyBkZSBtYW5lcmEgbcOhcyBwcm9mdW5kYSB5IHNpZ25pZmljYXRpdmEuIEFkZW3DoXMsIGZhY2lsaXRhIGxhIGlkZW50aWZpY2FjacOzbiBkZSBlcnJvcmVzIGNvbmNlcHR1YWxlcyB5IGxhIGV2YWx1YWNpw7NuIGRlbCBwcm9ncmVzbyBpbmRpdmlkdWFsLgogICAgICAKICAgCiAgICAucm93Lm1iLTUKICAgICAgLmNvbC1sZy00Lm9yZGVyLWxnLTIubWItMy5tYi1sZy0wCiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMi8xNi5wbmciLCBkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgIC5jb2wtbGctOC5vcmRlci1sZy0xCiAgICAgICAgLmJnLWNvbG9yLTcucC00Lm1iLTMoZGF0YS1hb3M9ImZhZGUtbGVmdCIpCiAgICAgICAgICBwLm1iLTAgRW4gb3RyYXMgcGFsYWJyYXMsIGxvcyBtYXBhcyBjb25jZXB0dWFsZXMgc29uIHVuYSBoZXJyYW1pZW50YSBwb2Rlcm9zYSBwYXJhIGVsIGFwcmVuZGl6YWplIHNpZ25pZmljYXRpdm8sIGVsIGRlc2Fycm9sbG8gZGVsIGNvbm9jaW1pZW50byBlc3RyYXTDqWdpY28geSBsYSBldmFsdWFjacOzbiBkZWwgYXByZW5kaXphamUuIFN1IGVzdHJ1Y3R1cmEgamVyw6FycXVpY2EgeSBzdSBjYXBhY2lkYWQgcGFyYSByZXByZXNlbnRhciByZWxhY2lvbmVzIGVudHJlIGNvbmNlcHRvcywgbG9zIGNvbnZpZXJ0ZW4gZW4gdW4gcmVjdXJzbyB2YWxpb3NvIHBhcmEgZXN0dWRpYW50ZXMgeSBkb2NlbnRlcy4gQSBwZXNhciBxdWUgc3UgdXNvIG5vIGVzdMOhIG11eSBleHRlbmRpZG8sIGxvcyBtYXBhcyBjb25jZXB0dWFsZXMgdGllbmVuIGVsIHBvdGVuY2lhbCBkZSB0cmFuc2Zvcm1hciBsYSBmb3JtYSBlbiBxdWUgc2UgZW5zZcOxYSB5IHNlIGFwcmVuZGUuCiAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgQWhvcmEgYmllbiwgZW4gZXN0ZSBwdW50byBwb2RlbW9zIG1lbmNpb25hciBwcm9jZXNvcyBtZW50YWxlcyBxdWUgc29uIG5lY2VzYXJpb3MgcGFyYSBlbCBhcHJlbmRpemFqZSB5IHF1ZSBzZSBlc3RpbXVsYW4gY29uIGVzdGFzIGVzdHJhdGVnaWFzIG1lbmNpb25hZGFzIGRlc2RlIGxhcyBtaXJhZGFzIGRlIGRpZmVyZW50ZXMgYXV0b3JlcyBjb21vIENhbWFyZ28geSBIZWRlcmljaCAoMjAxMCksIENvdXRpbmhvLCBFLiAoMjAxNCksIGNpdGEgYSBOb3ZhayB5IEdvd2luICgxOTg0KSwgeSBwb3IgT3JlbGxhbmEgVmFsZMOpcyAoMjAwOSksIHF1ZSBjb250aW7DumEgY2l0YW5kbyBhIEF1c3ViZWwgeSBQaWFnZXQuCgogICAgLnJvdy5hbGlnbi1pdGVtcy1zdGFydC5tYi01CiAgICAgIC5jb2wtbGctNC5tYi0zLm1iLWxnLTAKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEyLzE3LnBuZyIsIGFsdD0iIikubWItNC5tYi1sZy0wCiAgICAgIC5jb2wtbGctOAogICAgCiAgICAgICAgQWNvcmRpb25BKHRpcG89ImIiKQogICAgICAgICAgLmRpdih0aXR1bG89IkxhIG9ic2VydmFjacOzbiIpCiAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvcgogICAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTkKICAgICAgICAgICAgICAgIHAubWItMCA8Yj5Qcm9jZXNvIGluaWNpYWwgZGUgY29udGFjdG8gZGlyZWN0byBjb24gb2JqZXRvcyB5IGZlbsOzbWVub3MuPC9iPiBMYSBvYnNlcnZhY2nDs24gZXMgZWwgcHJpbWVyIHBhc28gZW4gZWwgcHJvY2VzbyBkZSBhcHJlbmRpemFqZS4gSW52b2x1Y3JhIGxhIGludGVyYWNjacOzbiBkaXJlY3RhIGNvbiBlbCBlbnRvcm5vLCBwZXJtaXRpZW5kbyBhIGxvcyBlc3R1ZGlhbnRlcyByZWNvcGlsYXIgaW5mb3JtYWNpw7NuIGEgdHJhdsOpcyBkZSBzdXMgc2VudGlkb3MuCiAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItOQogICAgICAgICAgICAgICAgcC5tYi0wIDxiPkJhc2UgcGFyYSBlbCBkZXNhcnJvbGxvIGRlIGhhYmlsaWRhZGVzIGNvZ25pdGl2YXMgc3VwZXJpb3Jlcy48L2I+IEEgdHJhdsOpcyBkZSBsYSBvYnNlcnZhY2nDs24sIGxvcyBlc3R1ZGlhbnRlcyBkZXNhcnJvbGxhbiBoYWJpbGlkYWRlcyBjb2duaXRpdmFzIGNvbW8gbGEgYXRlbmNpw7NuLCBsYSBwZXJjZXBjacOzbiB5IGxhIG1lbW9yaWEuCiAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItOQogICAgICAgICAgICAgICAgcC5tYi0wIDxiPkltcGxpY2EgZWwgdXNvIGNvbnNjaWVudGUgZGUgbG9zIHNlbnRpZG9zLjwvYj4gTGEgb2JzZXJ2YWNpw7NuIGVmZWN0aXZhIHJlcXVpZXJlIGxhIGF0ZW5jacOzbiBjb25zY2llbnRlIHkgZWwgdXNvIGludGVuY2lvbmFsIGRlIGxvcyBzZW50aWRvcyAodmlzdGEsIG/DrWRvLCB0YWN0bywgZXRjLikuCiAgICAKICAgICAgICAgIC5kaXYodGl0dWxvPSJMYSBjb21wYXJhY2nDs24iKQogICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IKICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci05CiAgICAgICAgICAgICAgICBwLm1iLTAgPGI+RXN0YWJsZWNpbWllbnRvIGRlIHNpbWlsaXR1ZGVzIHkgZGlmZXJlbmNpYXMuPC9iPiBMYSBjb21wYXJhY2nDs24gcGVybWl0ZSBhIGxvcyBlc3R1ZGlhbnRlcyBpZGVudGlmaWNhciB5IGFuYWxpemFyIGxhcyBzaW1pbGl0dWRlcyB5IGRpZmVyZW5jaWFzIGVudHJlIG9iamV0b3MgeSBmZW7Ds21lbm9zLgogICAgICAgICAgICAgIGxpLm1iLTAuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0LmJnLWNvbG9yLTkKICAgICAgICAgICAgICAgIHAubWItMCA8Yj5EZXNhcnJvbGxvIGRlIGNyaXRlcmlvcyBkZSBjbGFzaWZpY2FjacOzbi48L2I+IEEgdHJhdsOpcyBkZSBsYSBjb21wYXJhY2nDs24sIGxvcyBlc3R1ZGlhbnRlcyBkZXNhcnJvbGxhbiBjcml0ZXJpb3MgcGFyYSBvcmdhbml6YXIgeSBjbGFzaWZpY2FyIGluZm9ybWFjacOzbi4KICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci05CiAgICAgICAgICAgICAgICBwLm1iLTAgPGI+RnVuZGFtZW50byBwYXJhIGVsIHBlbnNhbWllbnRvIGFuYWzDrXRpY28uPC9iPiBMYSBoYWJpbGlkYWQgcGFyYSBjb21wYXJhciwgZXMgZXNlbmNpYWwgcGFyYSBlbCBwZW5zYW1pZW50byBhbmFsw610aWNvIHkgY3LDrXRpY28sIHBlcm1pdGllbmRvIGEgbG9zIGVzdHVkaWFudGVzIGV2YWx1YXIgeSBzaW50ZXRpemFyIGluZm9ybWFjacOzbi4KICAgIAogICAgICAgICAgLmRpdih0aXR1bG89IkxhIGNsYXNpZmljYWNpw7NuIikKICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yCiAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItOQogICAgICAgICAgICAgICAgcC5tYi0wIDxiPk9yZ2FuaXphY2nDs24gZGUgZWxlbWVudG9zLCBzZWfDum4gY2FyYWN0ZXLDrXN0aWNhcyBjb211bmVzLjwvYj4gTGEgY2xhc2lmaWNhY2nDs24gaW1wbGljYSBhZ3J1cGFyIG9iamV0b3MgbyBpbmZvcm1hY2nDs24sIHNlZ8O6biBjYXJhY3RlcsOtc3RpY2FzIGNvbXVuZXMuCiAgICAgICAgICAgICAgbGkubWItMC5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQuYmctY29sb3ItOQogICAgICAgICAgICAgICAgcC5tYi0wIDxiPkRlc2Fycm9sbG8gZGUgY2F0ZWdvcsOtYXMgY29uY2VwdHVhbGVzLjwvYj4gQSB0cmF2w6lzIGRlIGxhIGNsYXNpZmljYWNpw7NuLCBsb3MgZXN0dWRpYW50ZXMgZGVzYXJyb2xsYW4gY2F0ZWdvcsOtYXMgY29uY2VwdHVhbGVzIHF1ZSBsZXMgcGVybWl0ZW4gb3JnYW5pemFyIHkgY29tcHJlbmRlciBtZWpvciBlbCBtdW5kby4KICAgICAgICAgICAgICBsaS5tYi0wLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodC5iZy1jb2xvci05CiAgICAgICAgICAgICAgICBwLm1iLTAgPGI+QmFzZSBwYXJhIGxhIGNvbnN0cnVjY2nDs24gZGUgZXNxdWVtYXMgbWVudGFsZXMuPC9iPiBMYSBjbGFzaWZpY2FjacOzbiBheXVkYSBhIGNvbnN0cnVpciB5IG9yZ2FuaXphciBlc3F1ZW1hcyBtZW50YWxlcywgZmFjaWxpdGFuZG8gZWwgYXByZW5kaXphamUgeSBsYSByZXRlbmNpw7NuIGRlIGluZm9ybWFjacOzbi4KICAgIAogICAgcC5tYi00IEFob3JhLCBjb25vemNhbW9zIGVsIHByb2Nlc28gZGUgY29uc3RydWNjacOzbiBkZWwgY29ub2NpbWllbnRvOgoKICAgIFRhYnNDLmNvbG9yLWFjZW50by1jb250ZW5pZG8ubWItNQogICAgICAudGFicy1jb250ZW50LmJvcmRlci5weC00LnAtbWQtNS5weS0zKHRpdHVsbz0iRmFzZSBjb25jcmV0YSIgOmljb249InJlcXVpcmUoJ0AvYXNzZXRzL2J1bGxldHMvMS5zdmcnKSIpCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgLmNvbC1sZy03LmNvbC14bC04Lm1iLTMubWItbWQtMAogICAgICAgICAgICBoNCBGYXNlIGNvbmNyZXRhCiAgICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvcgogICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgICAgcC5tYi0wIDxiPk1hbmlwdWxhY2nDs24gZGlyZWN0YSBkZSBtYXRlcmlhbGVzLjwvYj4gTG9zIGVzdHVkaWFudGVzIGludGVyYWN0w7phbiBkaXJlY3RhbWVudGUgY29uIG9iamV0b3MgeSBtYXRlcmlhbGVzLCBsbyBxdWUgbGVzIHBlcm1pdGUgY29tcHJlbmRlciBjb25jZXB0b3MgZGUgbWFuZXJhIHRhbmdpYmxlLgogICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgICAgcC5tYi0wIDxiPkV4cGVyaWVuY2lhcyBzZW5zb3JpYWxlcy48L2I+IExhIG1hbmlwdWxhY2nDs24gZGUgbWF0ZXJpYWxlcyBvZnJlY2UgZXhwZXJpZW5jaWFzIHNlbnNvcmlhbGVzIHF1ZSBlbnJpcXVlY2VuIGVsIGFwcmVuZGl6YWplLgogICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgICAgcC5tYi0wIDxiPkV4cGxvcmFjacOzbiBhY3RpdmEuPC9iPiBMb3MgZXN0dWRpYW50ZXMgZXhwbG9yYW4gYWN0aXZhbWVudGUgc3UgZW50b3JubywgbG8gcXVlIGZvbWVudGEgbGEgY3VyaW9zaWRhZCB5IGVsIGRlc2N1YnJpbWllbnRvLgogICAgCiAgICAgICAgICAuY29sLW1kLTguY29sLWxnLTUuY29sLXhsLTQKICAgICAgICAgICAgZmlndXJlKGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMi8xOC5wbmcnLCBhbHQ9JycpCiAgICAKICAgICAgLnRhYnMtY29udGVudC5ib3JkZXIucHgtNC5wLW1kLTUucHktMyh0aXR1bG89IkZhc2UgcmVwcmVzZW50YXRpdmEiIDppY29uPSJyZXF1aXJlKCdAL2Fzc2V0cy9idWxsZXRzLzEuc3ZnJykiKQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctNy5jb2wteGwtOC5tYi0zLm1iLW1kLTAKICAgICAgICAgICAgaDQgRmFzZSByZXByZXNlbnRhdGl2YQogICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IKICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQKICAgICAgICAgICAgICAgIHAubWItMCA8Yj5FbGFib3JhY2nDs24gZGUgZGlidWpvcyB5IGVzcXVlbWFzLjwvYj4gTG9zIGVzdHVkaWFudGVzIGNyZWFuIHJlcHJlc2VudGFjaW9uZXMgZ3LDoWZpY2FzIGRlIGxvIHF1ZSBoYW4gYXByZW5kaWRvLgogICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgICAgcC5tYi0wIDxiPlJlcHJlc2VudGFjaW9uZXMgZ3LDoWZpY2FzLjwvYj4gVXRpbGl6YW4gZ3LDoWZpY29zLCBkaWFncmFtYXMgeSBlc3F1ZW1hcyBwYXJhIG9yZ2FuaXphciB5IHZpc3VhbGl6YXIgbGEgaW5mb3JtYWNpw7NuLgogICAgICAgICAgICAgIGxpLmQtZmxleAogICAgICAgICAgICAgICAgaS5mYXIuZmEtYXJyb3ctYWx0LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgICAgcC5tYi0wIDxiPkNvbnN0cnVjY2nDs24gZGUgbW9kZWxvcy48L2I+IExvcyBlc3R1ZGlhbnRlcyBjb25zdHJ1eWVuIG1vZGVsb3MgcXVlIHJlcHJlc2VudGFuIGNvbmNlcHRvcyBhYnN0cmFjdG9zLiAKCiAgICAKICAgICAgICAgIC5jb2wtbWQtOC5jb2wtbGctNS5jb2wteGwtNAogICAgICAgICAgICBmaWd1cmUoZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWEyLzE5LnBuZycsIGFsdD0nJykKICAgICAgLnRhYnMtY29udGVudC5ib3JkZXIucHgtNC5wLW1kLTUucHktMyh0aXR1bG89IkZhc2Ugc2ltYsOzbGljYSIgOmljb249InJlcXVpcmUoJ0AvYXNzZXRzL2J1bGxldHMvMS5zdmcnKSIpCiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgLmNvbC1sZy03LmNvbC14bC04Lm1iLTMubWItbWQtMAogICAgICAgICAgICBoNCBGYXNlIHNpbWLDs2xpY2EKICAgICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yCiAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgICBwLm1iLTAgPGI+VXNvIGRlIHPDrW1ib2xvcyB5IHNpZ25vcy48L2I+IExvcyBlc3R1ZGlhbnRlcyB1dGlsaXphbiBzw61tYm9sb3MgeSBzaWdub3MgcGFyYSByZXByZXNlbnRhciBpZGVhcyBjb21wbGVqYXMuCiAgICAgICAgICAgICAgbGkuZC1mbGV4CiAgICAgICAgICAgICAgICBpLmZhci5mYS1hcnJvdy1hbHQtY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgICBwLm1iLTAgPGI+QWJzdHJhY2Npw7NuIGRlIGNvbmNlcHRvcy48L2I+IEEgdHJhdsOpcyBkZWwgdXNvIGRlIHPDrW1ib2xvcywgbG9zIGVzdHVkaWFudGVzIGRlc2Fycm9sbGFuIGxhIGNhcGFjaWRhZCBkZSBwZW5zYXIgZGUgbWFuZXJhIGFic3RyYWN0YS4KICAgICAgICAgICAgICBsaS5kLWZsZXgKICAgICAgICAgICAgICAgIGkuZmFyLmZhLWFycm93LWFsdC1jaXJjbGUtcmlnaHQKICAgICAgICAgICAgICAgIHAubWItMCA8Yj5HZW5lcmFsaXphY2nDs24gZGUgYXByZW5kaXphamVzLjwvYj4gQXBsaWNhbiBsb3MgY29ub2NpbWllbnRvcyBhZHF1aXJpZG9zIGEgbnVldmFzIHNpdHVhY2lvbmVzIHkgY29udGV4dG9zLgoKICAgIAogICAgICAgICAgLmNvbC1tZC04LmNvbC1sZy01LmNvbC14bC00CiAgICAgICAgICAgIGZpZ3VyZShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTIvMjAucG5nJywgYWx0PScnKQogICAgICAgIAogICAgICAgICAgICAKCiAgICAuYmctZnVsbC13aWR0aC5ib3JkZXItdG9wLmFjdGl2aWRhZC5iZy1jb2xvci1hY3RpdmlkYWQKICAgICAgLnAtNC5wLW1kLTUKICAgICAgICAjQWN0aXZpZGFkICAgICAgICAgICAgICAgIAogICAgICAgICAgPEFjdGl2aWRhZCA6Y3Vlc3Rpb25hcmlvPSJjdWVzdGlvbmFyaW8iLz4KICAgICAgICAgIAogICAgLmJnLWZ1bGwtd2lkdGguYm9yZGVyLXRvcC5jb2xvci1wcmltYXJpbwogICAgICAucC00LnAtbWQtNQogICAgICAgIGgyKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBNQVRFUklBTCBDT01QTEVNRU5UQVJJTwogICAgICAgIC5yb3cubWF0ZXJpYWwtY29tcGxlbWVudGFyaW8KICAgICAgICAgIC5jb2wtMTIuY29sLW1kLTYuY29sLWxnLTcKICAgICAgICAgICAgcCBMb3MgaW52aXRhbW9zIGEgZXhwbG9yYXIgZWwgbWF0ZXJpYWwgY29tcGxlbWVudGFyaW8gZGUgZXN0ZSBjdXJzbywgZW4gZXN0YSBzZWNjacOzbiBlbmNvbnRyYXLDoSByZWN1cnNvcyBxdWUgbGUgcGVybWl0aXLDoW4gcHJvZnVuZGl6YXIgIHkgZW5yaXF1ZWNlciBzdSBhcHJlbmRpemFqZSBlbiBsb3MgdGVtYXMgdHJhdGFkb3MgZW4gZXN0YSB1bmlkYWQuCgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9saW5rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwOi8vd3d3LmpvdXJuYWxhbHBoYWNlbnRhdXJpLmNvbS9pbmRleC5waHAvcmV2aXN0YS9hcnRpY2xlL2Rvd25sb2FkLzc2Lzc4IiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgUmXDoXRlZ3VpLCBQLiBWLiwgQnVyZ2EsIEwuIEEuIEQuIMOBLiwgJiBQaW5lZG8sIEcuIFMuICgyMDIyKS4gTG9zIG9yZ2FuaXphZG9yZXMgZ3LDoWZpY29zIGNvbW8gZXN0cmF0ZWdpYSBlbiBsYSBjb21wcmVuc2nDs24gbGVjdG9yYTogdW5hIHJldmlzacOzbiBkZSBsYSBsaXRlcmF0dXJhIGNpZW50w61maWNhIGRlbCAyMDE1LTIwMjEuIEFscGhhIENlbnRhdXJpLCAzKDIpLCAzMS0zNi4gIAoKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbGluay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly9lbGlicm8ubmV0L2VzL2VyZWFkZXIvdGVjbm9sb2dpY2FkZWxvcmllbnRlLzExMTU1Mz9wYWdlPTE0ICIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIFBvbnRhbHRpLCBCLiAoMjAxOCkuIFRhbGxlciBkZSBtYXBhcyBjb25jZXB0dWFsZXMgeSBtZW50YWxlczogcGFyYSBhcHJlbmRlciBhIHBlbnNhciB5IG9yZ2FuaXphciBpZGVhczogKCBlZC4pLiBOYXJjZWEgRWRpY2lvbmVzLiAKICAgICAgICAgICAgcC5kLWZsZXgubXktNAogICAgICAgICAgICAgIGltZy5tZS0zKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbGluay5zdmcnIDpzdHlsZT0ieydtYXgtd2lkdGgnOicxNnB4J30iKQogICAgICAgICAgICAgIGEoaHJlZj0iaHR0cHM6Ly93d3cudW5kZXJzdG9vZC5vcmcvZXMtbXgvYXJ0aWNsZXMvY29tbW9uLWFkdmFuY2Utb3JnYW5pemVycy1hbmQtd2h5LXRoZXktd29yayAiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBPc2V3YWx0LCBHLiAoMjIsIG9jdHVicmUgMjAyMCkuIFF1w6kgc29uIGxvcyBvcmdhbml6YWRvcmVzIHByZXZpb3MgeSBwb3IgcXXDqSBmdW5jaW9uYW4uIFVuZGVyc3Rvb2QuICAKCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL3RlbXBsYXRlL2ljb25vLXl0LnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS93YXRjaD92PWY0MHhTN2JzSXRZIiB0YXJnZXQ9Il9ibGFuayIgcmVsPSJub29wZW5lciBub3JlZmVycmVyIikgU3Byb3V0cyBFc3Bhw7FvbC4gKDIwMjMsIDE4IGRlIGFnb3N0bykuIExvcyAzIHBhc29zIGRlIGFwcmVuZGl6YWplIGVuIGVsIGN1cnLDrWN1bHVtIGVuIGVzcGlyYWwgZGUgQnJ1bmVyLiBbVsOtZGVvXS4gWW91dHViZS4gIAoKICAgICAgICAgIC5jb2wtMTIuY29sLW1kLTYuY29sLWxnLTMub2Zmc2V0LWxnLTEKICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbWF0ZXJpYWwtY29tcGxlbWVudGFyaW8uc3ZnJywgYWx0PScnKQoK"},null]}