{"remainingRequest":"/home/runner/work/U1_Taller_Disenio_Materiales_Apoyo_EduInfantil/U1_Taller_Disenio_Materiales_Apoyo_EduInfantil/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U1_Taller_Disenio_Materiales_Apoyo_EduInfantil/U1_Taller_Disenio_Materiales_Apoyo_EduInfantil/src/views/curso/Tema1.vue?vue&type=template&id=728d7606&lang=pug&","dependencies":[{"path":"/home/runner/work/U1_Taller_Disenio_Materiales_Apoyo_EduInfantil/U1_Taller_Disenio_Materiales_Apoyo_EduInfantil/src/views/curso/Tema1.vue","mtime":1747274799134},{"path":"/home/runner/work/U1_Taller_Disenio_Materiales_Apoyo_EduInfantil/U1_Taller_Disenio_Materiales_Apoyo_EduInfantil/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Taller_Disenio_Materiales_Apoyo_EduInfantil/U1_Taller_Disenio_Materiales_Apoyo_EduInfantil/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U1_Taller_Disenio_Materiales_Apoyo_EduInfantil/U1_Taller_Disenio_Materiales_Apoyo_EduInfantil/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U1_Taller_Disenio_Materiales_Apoyo_EduInfantil/U1_Taller_Disenio_Materiales_Apoyo_EduInfantil/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U1_Taller_Disenio_Materiales_Apoyo_EduInfantil/U1_Taller_Disenio_Materiales_Apoyo_EduInfantil/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}